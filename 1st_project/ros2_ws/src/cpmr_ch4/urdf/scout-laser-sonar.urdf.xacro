<?xml version="1.0"?>

<!--
  Scout robot with BOTH LIDAR and SONAR.
  - Sensors are co-located in (x,y) (centerline, facing forward).
  - SONAR is 1 cm higher than LIDAR.
  - A small green cube above the sensors acts as a visual cue.
-->

<robot name="$(arg name)" xmlns:xacro="http://www.ros.org/wiki/xacro">
  <!-- ====================== Properties ====================== -->
  <xacro:property name="robot_base_width" value="0.36" />
  <xacro:property name="robot_base_length" value="0.4" />
  <xacro:property name="robot_base_height" value="0.3" />
  <xacro:property name="robot_base_mass" value="4.5" />

  <xacro:property name="robot_wheel_zoffset" value="-0.06" />
  <xacro:property name="robot_wheel_xoffset" value="0.08" />
  <xacro:property name="robot_wheel_radius" value="0.14" />
  <xacro:property name="robot_wheel_width" value="0.02" />

  <xacro:property name="robot_caster_link_height" value="0.03" />
  <xacro:property name="robot_caster_link_width" value="0.03" />
  <xacro:property name="robot_caster_link_length" value="0.05" />
  <xacro:property name="robot_caster_link_offset" value="-0.025" />
  <xacro:property name="robot_caster_joint_offset" value="-0.15" />
  <xacro:property name="robot_caster_wheel_radius" value="0.02" />

  <!-- Sensor geometry -->
  <xacro:property name="robot_laser_radius" value="0.10" />
  <xacro:property name="robot_laser_height" value="0.08" />
  <xacro:property name="robot_sonar_radius" value="0.18" />
  <xacro:property name="robot_sonar_height" value="0.08" />

  <!-- ====================== Includes ====================== -->
  <xacro:include filename="$(find cpmr_ch4)/colors.xacro" />

  <!-- ====================== Inertia helpers ====================== -->
  <xacro:macro name="I_cylinder" params="m r h">
    <inertial>
      <mass value="${m}" />
      <inertia
        ixx="${m*(3*r*r+h*h)/12}"
        iyy="${m*(3*r*r+h*h)/12}"
        izz="${m*r*r/2}"
        ixy="0"
        ixz="0"
        iyz="0" />
    </inertial>
  </xacro:macro>

  <xacro:macro name="I_cuboid" params="m x y z">
    <inertial>
      <mass value="${m}" />
      <inertia
        ixx="${m*(y*y+z*z)/12}"
        iyy="${m*(x*x+z*z)/12}"
        izz="${m*(x*x+z*z)/12}"
        ixy="0"
        ixz="0"
        iyz="0" />
    </inertial>
  </xacro:macro>

  <!-- ====================== Footprint & Base ====================== -->
  <link name="base_footprint" />

  <gazebo reference="base_link">
    <material>Gazebo/Blue</material>
  </gazebo>

  <link name="base_link">
    <visual>
      <geometry>
        <box size="${robot_base_length} ${robot_base_width} ${robot_base_height}" />
      </geometry>
      <material name="blue" />
    </visual>
    <collision>
      <geometry>
        <box size="${robot_base_length} ${robot_base_width} ${robot_base_height}" />
      </geometry>
    </collision>
    <xacro:I_cuboid m="8.4" x="${robot_base_length}" y="${robot_base_width}" z="${robot_base_height}" />
  </link>

  <joint name="base_joint" type="fixed">
    <origin xyz="0 0 ${robot_wheel_radius-robot_wheel_zoffset}" rpy="0 0 0" />
    <parent link="base_footprint" />
    <child link="base_link" />
  </joint>

  <!-- ====================== LIDAR (reference) ====================== -->
  <gazebo reference="laser_link">
    <material>Gazebo/Red</material>
  </gazebo>

  <link name="laser_link">
    <visual>
      <geometry>
        <cylinder length="${robot_laser_height}" radius="${robot_laser_radius}" />
      </geometry>
      <material name="red" />
    </visual>
    <collision>
      <geometry>
        <cylinder length="${robot_laser_height}" radius="${robot_laser_radius}" />
      </geometry>
    </collision>
    <xacro:I_cylinder m="0.1" r="${robot_laser_radius}" h="${robot_laser_height}" />
  </link>

  <!-- Co-located with SONAR in x,y; mounted on top face of base -->
  <joint name="laser_joint" type="fixed">
    <origin xyz="0 0 ${robot_base_height/2 + robot_laser_height/2}" rpy="0 0 0" />
    <parent link="base_link" />
    <child link="laser_link" />
  </joint>

  <gazebo reference="laser_link">
    <static>true</static>
    <sensor type="ray" name="laser">
      <pose>0 0 0 0 0 0</pose>
      <visualize>true</visualize>
      <update_rate>10</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>360</samples>
            <resolution>1</resolution>
            <min_angle>-3.1415</min_angle>
            <max_angle>3.1240</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.20</min>
          <max>10.0</max>
          <resolution>0.01</resolution>
        </range>
      </ray>
      <plugin name="laser_controller" filename="libgazebo_ros_ray_sensor.so">
        <ros>
          <namespace>/</namespace>
          <remapping>~/out:=scan</remapping>
        </ros>
        <frameName>laser_link</frameName>
        <output_type>sensor_msgs/LaserScan</output_type>
      </plugin>
    </sensor>
  </gazebo>

  <!-- ====================== SONAR (1 cm higher) ====================== -->
  <gazebo reference="sonar_link">
    <material>Gazebo/Blue</material>
  </gazebo>

  <link name="sonar_link">
    <visual>
      <geometry>
        <cylinder length="${robot_sonar_height}" radius="${robot_sonar_radius}" />
      </geometry>
      <material name="blue" />
    </visual>
    <collision>
      <geometry>
        <cylinder length="${robot_sonar_height}" radius="${robot_sonar_radius}" />
      </geometry>
    </collision>
    <xacro:I_cylinder m="0.1" r="${robot_sonar_radius}" h="${robot_sonar_height}" />
  </link>

  <joint name="sonar_joint" type="fixed">
    <!-- same x,y as LIDAR; z is +1 cm -->
    <origin xyz="0 0 ${robot_base_height/2 + robot_sonar_height/2 + 0.01}" rpy="0 0 0" />
    <parent link="base_link" />
    <child link="sonar_link" />
  </joint>

  <gazebo reference="sonar_link">
    <sensor type="ray" name="sonar">
      <pose>0 0 0 0 0 0</pose>
      <visualize>true</visualize>
      <update_rate>10</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>9</samples>
            <resolution>1</resolution>
            <min_angle>-0.1309</min_angle>
            <max_angle>0.1309</max_angle>
          </horizontal>
          <vertical>
            <samples>9</samples>
            <resolution>1</resolution>
            <min_angle>-0.1309</min_angle>
            <max_angle>0.1309</max_angle>
          </vertical>
        </scan>
        <range>
          <min>0.20</min>
          <max>5.0</max>
          <resolution>0.01</resolution>
        </range>
      </ray>
      <plugin name="sonar_plugin" filename="libgazebo_ros_ray_sensor.so">
        <frame_name>sonar_link</frame_name>
        <updateRate>10</updateRate>
        <radiation>ultrasound</radiation>
        <output_type>sensor_msgs/Range</output_type>
        <ros>
          <remapping>~/out:=sonar</remapping>
        </ros>
      </plugin>
    </sensor>
  </gazebo>

  <!-- ====================== Visual cue cube ====================== -->
  <link name="sensor_cue">
    <visual>
      <geometry>
        <box size="0.03 0.03 0.03" />
      </geometry>
      <material name="green" />
    </visual>
  </link>

  <joint name="sensor_cue_joint" type="fixed">
    <!-- float a bit above the taller of the two sensors -->
    <origin xyz="0 0 ${robot_base_height/2 + max(robot_sonar_height, robot_laser_height) + 0.03}" rpy="0 0 0" />
    <parent link="base_link" />
    <child link="sensor_cue" />
  </joint>

  <!-- ====================== Wheels ====================== -->
  <gazebo reference="left_wheel_link">
    <material>Gazebo/Red</material>
  </gazebo>

  <link name="left_wheel_link">
    <visual>
      <geometry>
        <cylinder length="${robot_wheel_width}" radius="${robot_wheel_radius}" />
      </geometry>
      <material name="red" />
    </visual>
    <collision>
      <geometry>
        <cylinder length="${robot_wheel_width}" radius="${robot_wheel_radius}" />
      </geometry>
    </collision>
    <xacro:I_cylinder m="0.1" r="${robot_wheel_radius}" h="${robot_wheel_width}" />
  </link>

  <joint name="left_wheel_joint" type="continuous">
    <axis xyz="0 0 1" />
    <parent link="base_link" />
    <child link="left_wheel_link" />
    <origin rpy="-1.5708 0 0" xyz="${robot_wheel_xoffset} ${robot_base_width/2+robot_wheel_width/2} ${robot_wheel_zoffset}" />
  </joint>

  <gazebo reference="right_wheel_link">
    <material>Gazebo/Green</material>
  </gazebo>

  <link name="right_wheel_link">
    <visual>
      <geometry>
        <cylinder length="${robot_wheel_width}" radius="${robot_wheel_radius}" />
      </geometry>
      <material name="green" />
    </visual>
    <collision>
      <geometry>
        <cylinder length="${robot_wheel_width}" radius="${robot_wheel_radius}" />
      </geometry>
    </collision>
    <xacro:I_cylinder m="0.1" r="${robot_wheel_radius}" h="${robot_wheel_width}" />
  </link>

  <joint name="right_wheel_joint" type="continuous">
    <axis xyz="0 0 1" />
    <parent link="base_link" />
    <child link="right_wheel_link" />
    <origin rpy="-1.5708 0 0" xyz="${robot_wheel_xoffset} ${-robot_base_width/2-robot_wheel_width/2} ${robot_wheel_zoffset}" />
  </joint>

  <!-- ====================== Caster assembly ====================== -->
  <gazebo reference="caster_link">
    <material>Gazebo/Silver</material>
  </gazebo>

  <link name="caster_link">
    <visual>
      <origin xyz="${robot_caster_link_length/2} 0 0" rpy="0 0 0" />
      <geometry>
        <box size="${robot_caster_link_length} ${robot_caster_link_width} ${robot_caster_link_height}" />
      </geometry>
      <material name="silver" />
    </visual>
    <collision>
      <origin xyz="${robot_caster_link_length/2} 0 0" rpy="0 0 0" />
      <geometry>
        <box size="${robot_caster_link_length} ${robot_caster_link_width} ${robot_caster_link_height}" />
      </geometry>
    </collision>
    <xacro:I_cuboid m="0.1" x="${robot_caster_link_length}" y="${robot_caster_link_width}" z="${robot_caster_link_height}" />
  </link>

  <joint name="caster_joint" type="continuous">
    <axis xyz="0 0 1" />
    <parent link="base_link" />
    <child link="caster_link" />
    <origin rpy="0 0 3.1415" xyz="${robot_caster_joint_offset} 0 ${-robot_base_height/2-robot_caster_link_height/2}" />
  </joint>

  <gazebo reference="caster_wheel_link">
    <material>Gazebo/Silver</material>
  </gazebo>

  <link name="caster_wheel_link">
    <visual>
      <geometry>
        <cylinder length="${robot_caster_link_height}" radius="${robot_caster_wheel_radius}" />
      </geometry>
      <material name="silver" />
    </visual>
    <collision>
      <geometry>
        <cylinder length="${robot_caster_link_height}" radius="${robot_caster_wheel_radius}" />
      </geometry>
    </collision>
    <xacro:I_cylinder m="0.1" r="${robot_caster_wheel_radius}" h="${robot_caster_link_height}" />
  </link>

  <joint name="caster_wheel_joint" type="continuous">
    <axis xyz="0 0 1" />
    <child link="caster_wheel_link" />
    <parent link="caster_link" />
    <origin rpy="1.5708 0 0" xyz="${robot_caster_link_length} 0 ${-robot_caster_link_height/2}" />
  </joint>

  <!-- ====================== Gazebo plugins ====================== -->
  <gazebo>
    <plugin name="joint_state_publisher" filename="libgazebo_ros_joint_state_publisher.so">
      <joint_name>caster_wheel_joint</joint_name>
      <joint_name>caster_joint</joint_name>
      <joint_name>left_wheel_joint</joint_name>
      <joint_name>right_wheel_joint</joint_name>
    </plugin>
  </gazebo>

  <gazebo>
    <plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so">
      <update_rate>20</update_rate>
      <left_joint>left_wheel_joint</left_joint>
      <right_joint>right_wheel_joint</right_joint>
      <robotBaseFrame>base_footprint</robotBaseFrame>
      <wheel_separation>${robot_base_width+robot_wheel_width}</wheel_separation>
      <wheel_diameter>${2*robot_wheel_radius}</wheel_diameter>
      <publish_odom>true</publish_odom>
      <publish_odom_tf>true</publish_odom_tf>
      <publish_wheel_tf>true</publish_wheel_tf>
      <odometry_frame>odom</odometry_frame>
      <robot_base_frame>base_footprint</robot_base_frame>
      <command_topic>cmd_vel</command_topic>
    </plugin>
  </gazebo>
</robot>
